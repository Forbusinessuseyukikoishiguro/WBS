# 新人エンジニア必見！マスタースケジュールとWBSを理解してプロジェクトを成功に導こう

## はじめに

新人エンジニアの皆さん、プロジェクトに参加したときに「マスタースケジュール」や「WBS」という言葉を聞いて困ったことはありませんか？

「なんか重要そうだけど、よく分からない...」
「先輩に聞くのも恥ずかしいし...」

大丈夫です！今回はこれらの重要な概念を、開発現場の実例を交えながら分かりやすく解説します。

## マスタースケジュールとは？

### 簡単に言うと
**プロジェクト全体の「大まかな予定表」**です。

家を建てるときの例で考えてみましょう：
```
1月：設計・計画　
2月：基礎工事
3月：骨組み工事
4月：屋根・外壁工事
5月：内装工事
6月：完成・引き渡し
```

これがマスタースケジュールのイメージです。

### システム開発の場合
```
4月：要件定義・基本設計
5月：詳細設計
6月-7月：実装（フロントエンド・バックエンド）
8月：テスト（単体・結合・システム）
9月：リリース準備・本番展開
10月：リリース
```

### マスタースケジュールの特徴
- **全体像**が一目で分かる
- **主要なマイルストーン**が明確
- **ステークホルダー**との情報共有に便利
- **大きな遅れ**を早期発見できる

## WBS（Work Breakdown Structure）とは？

### WBSの正式名称と意味
**Work Breakdown Structure = 作業分解構造**

「大きな作業を小さな作業に分解したもの」と覚えましょう。

### 料理で例えると
**「カレーライスを作る」**という大きなタスクを分解すると：

```
カレーライスを作る
├── 材料を準備する
│   ├── 野菜を買う（玉ねぎ、人参、じゃがいも）
│   ├── 肉を買う
│   └── カレールーを買う
├── 下準備をする
│   ├── 野菜を洗う
│   ├── 野菜を切る
│   └── 肉を切る
├── 調理する
│   ├── 肉を炒める
│   ├── 野菜を炒める
│   ├── 水を加えて煮込む
│   └── カレールーを入れる
└── 盛り付ける
    ├── ご飯を炊く
    ├── お皿に盛る
    └── 完成
```

### システム開発でのWBS例

**「ユーザー登録機能を開発する」**を分解すると：

```
ユーザー登録機能開発
├── 設計
│   ├── 画面設計書作成
│   ├── API設計書作成
│   └── DB設計書作成
├── 実装
│   ├── フロントエンド
│   │   ├── 登録画面作成
│   │   ├── バリデーション実装
│   │   └── API連携実装
│   └── バックエンド
│       ├── API実装
│       ├── DB操作実装
│       └── バリデーション実装
├── テスト
│   ├── 単体テスト
│   │   ├── フロントエンドテスト
│   │   └── バックエンドテスト
│   ├── 結合テスト
│   └── システムテスト
└── ドキュメント作成
    ├── 操作手順書
    └── 保守手順書
```

## マスタースケジュールとWBSの関係

### 関係性を図で理解しよう

```
マスタースケジュール（大きな視点）
┌─────────────────────────────────┐
│ 4月：要件定義 → 5月：設計 → 6月：実装 │
└─────────────────────────────────┘
                     ↓
              WBS（詳細な視点）
        ┌─────────────────────┐
        │ 設計フェーズの詳細     │
        │ ├── 画面設計（3日）   │
        │ ├── API設計（2日）    │  
        │ └── DB設計（2日）     │
        └─────────────────────┘
```

### 実際のプロジェクトでの使い分け

**マスタースケジュール**
- 経営陣やお客様への報告
- プロジェクト全体の進捗管理
- リソース計画
- リスク管理

**WBS**
- 開発チーム内でのタスク管理
- 個人の作業計画
- 詳細な進捗管理
- 工数見積もり

## 新人エンジニアが知っておくべきポイント

### 1. なぜWBSが重要なのか？

**見積もりの精度が上がる**
```
× 「ユーザー登録機能：10日」（大雑把）
○ 「画面作成：2日、API実装：3日、テスト：2日...」（詳細）
```

**作業の抜け漏れを防げる**
- 小さく分解することで見落としを発見
- テストやドキュメント作成も忘れずに計画

**進捗管理がしやすい**
- 「設計の80%完了」よりも「画面設計完了、API設計50%」の方が分かりやすい

### 2. WBS作成のコツ

**適切な粒度で分解する**
```
目安：1つのタスクは0.5〜2日程度

× 大きすぎる：「フロントエンド実装（10日）」
○ 適切：「ログイン画面作成（1日）」
× 小さすぎる：「ボタンの色を決める（0.1日）」
```

**完了条件を明確にする**
```
× 「画面作成」
○ 「ログイン画面作成（デザイン通り、バリデーション含む）」
```

### 3. よく使われるツール

**無料ツール**
- **Trello**：カンバン形式で直感的
- **Asana**：チーム向け、ガントチャート対応
- **GitHub Projects**：開発と連携しやすい

**有料ツール**
- **Microsoft Project**：本格的なプロジェクト管理
- **Redmine**：チケット管理と連携
- **Jira**：アジャイル開発に特化

### 4. 実際のプロジェクトでの立ち回り方

**プロジェクト開始時**
- マスタースケジュールで全体像を把握
- 自分が担当する部分をWBSで詳細確認
- 不明点は早めに質問

**開発中**
- WBSに基づいて日々の作業を進める
- 遅れそうな場合は早めに報告
- 完了したタスクはすぐに更新

**チーム会議**
- WBSベースで進捗報告
- 困っている点を具体的に共有
- 次の作業予定を明確に

## 実用的なWBSひな形テンプレート

### 基本的なWBSテンプレート

現場でそのまま使えるWBSのひな形を紹介します：

**NO.1 要件定義フェーズ**
開始予定：2024/04/01　終了予定：2024/04/05　予定工数：5日
担当者：-　ステータス：完了　実績工数：6日　進捗率：100%
補足：要件追加により1日延長

**NO.1.1 要件ヒアリング**
開始予定：2024/04/01　終了予定：2024/04/02　予定工数：2日
担当者：田中　ステータス：完了　実績工数：2日　進捗率：100%

**NO.1.2 要件定義書作成**
開始予定：2024/04/03　終了予定：2024/04/04　予定工数：2日
担当者：田中　ステータス：完了　実績工数：3日　進捗率：100%
補足：レビュー指摘対応で1日延長

**NO.1.3 要件定義書レビュー**
開始予定：2024/04/05　終了予定：2024/04/05　予定工数：1日
担当者：山田　ステータス：完了　実績工数：1日　進捗率：100%

**NO.2 設計フェーズ**
開始予定：2024/04/08　終了予定：2024/04/19　予定工数：10日
担当者：-　ステータス：進行中　実績工数：7日　進捗率：70%

**NO.2.1 基本設計**
開始予定：2024/04/08　終了予定：2024/04/12　予定工数：5日
担当者：佐藤　ステータス：完了　実績工数：5日　進捗率：100%

**NO.2.1.1 画面設計書作成**
開始予定：2024/04/08　終了予定：2024/04/10　予定工数：3日
担当者：佐藤　ステータス：完了　実績工数：3日　進捗率：100%

**NO.2.1.2 API設計書作成**
開始予定：2024/04/11　終了予定：2024/04/12　予定工数：2日
担当者：佐藤　ステータス：完了　実績工数：2日　進捗率：100%

**NO.2.2 詳細設計**
開始予定：2024/04/15　終了予定：2024/04/19　予定工数：5日
担当者：鈴木　ステータス：進行中　実績工数：2日　進捗率：40%
補足：DB設計で検討事項あり

**NO.2.2.1 DB設計書作成**
開始予定：2024/04/15　終了予定：2024/04/17　予定工数：3日
担当者：鈴木　ステータス：進行中　実績工数：2日　進捗率：67%
補足：パフォーマンス要件を再検討中

**NO.2.2.2 詳細設計書作成**
開始予定：2024/04/18　終了予定：2024/04/19　予定工数：2日
担当者：鈴木　ステータス：未着手　実績工数：0日　進捗率：0%
補足：DB設計完了後に開始

### ステータス管理の定義

**未着手**：まだ開始していない（進捗率：0%）
**進行中**：作業を実施中（進捗率：1-99%）
**完了**：作業が完了し、成果物も承認済み（進捗率：100%）
**保留**：何らかの理由で一時停止
**中止**：作業を中止

### プロジェクト管理者向けWBSテンプレート

より詳細な管理が必要な場合のテンプレート：

**NO.3 実装フェーズ**
先行タスク：NO.2　開始予定：2024/04/22　終了予定：2024/05/17
予定工数：20日　担当者：-　優先度：高　リスク度：中
ステータス：未着手　実績工数：0日　進捗率：0%
課題・リスク：要員不足の可能性　対応策：外部委託を検討

**NO.3.1 フロントエンド実装**
先行タスク：NO.2.1　開始予定：2024/04/22　終了予定：2024/05/03
予定工数：10日　担当者：田中　優先度：高　リスク度：低
ステータス：未着手　実績工数：0日　進捗率：0%

**NO.3.1.1 ログイン機能**
先行タスク：NO.2.1.1　開始予定：2024/04/22　終了予定：2024/04/24
予定工数：3日　担当者：田中　優先度：高　リスク度：低
ステータス：未着手　実績工数：0日　進捗率：0%

**NO.3.1.2 ユーザー管理機能**
先行タスク：NO.3.1.1　開始予定：2024/04/25　終了予定：2024/04/26
予定工数：2日　担当者：田中　優先度：中　リスク度：低
ステータス：未着手　実績工数：0日　進捗率：0%

**NO.3.1.3 検索機能**
先行タスク：NO.3.1.2　開始予定：2024/04/29　終了予定：2024/05/01
予定工数：3日　担当者：田中　優先度：中　リスク度：中
ステータス：未着手　実績工数：0日　進捗率：0%
課題・リスク：API仕様が未確定　対応策：API設計の早期確定

**NO.3.1.4 UI調整**
先行タスク：NO.3.1.3　開始予定：2024/05/02　終了予定：2024/05/03
予定工数：2日　担当者：田中　優先度：低　リスク度：低
ステータス：未着手　実績工数：0日　進捗率：0%

### 個人タスク管理用の簡易WBSテンプレート

新人エンジニア個人で使える簡易版：

**NO.1 要件確認**
予定日数：0.5日　担当：石田　完了予定日：2024/04/22
ステータス：完了　メモ：プロダクトオーナーと確認済み

**NO.2 画面モックアップ作成**
予定日数：1日　担当：石田　完了予定日：2024/04/23
ステータス：完了　メモ：Figmaで作成、レビュー済み

**NO.3 API設計書確認**
予定日数：0.5日　担当：石田　完了予定日：2024/04/24
ステータス：進行中　メモ：不明点を整理中

**NO.4 実装（ログイン画面）**
予定日数：2日　担当：石田　完了予定日：2024/04/26
ステータス：未着手　メモ：React + TypeScript

**NO.5 単体テスト作成**
予定日数：1日　担当：石田　完了予定日：2024/04/29
ステータス：未着手　メモ：Jest使用予定

**NO.6 結合テスト**
予定日数：0.5日　担当：石田　完了予定日：2024/04/30
ステータス：未着手　メモ：他機能との連携確認

## 実践演習：WBSを作ってみよう

### 課題：「TODOアプリ」のWBSを作成

以下の要件で上記のテンプレートを使ってWBSを作成してみましょう：

**機能要件**
- TODOの追加・編集・削除
- 完了/未完了の切り替え
- 一覧表示・検索機能

**技術要件**
- React（フロントエンド）
- Node.js + Express（バックエンド）
- MongoDB（データベース）

**あなたなりのWBSを考えてみてください！**

### 解答例（テンプレート形式）

| WBS番号 | タスク名 | 開始予定 | 終了予定 | 予定工数 | 担当者 | ステータス | 補足・備考 |
|---------|----------|----------|----------|----------|--------|------------|------------|
| 1 | **設計フェーズ** | 2024/05/01 | 2024/05/07 | 4日 | - | 未着手 | - |
| 1.1 | 要件定義書作成 | 2024/05/01 | 2024/05/01 | 1日 | 田中 | 未着手 | 機能要件・非機能要件整理 |
| 1.2 | 画面設計書作成 | 2024/05/02 | 2024/05/02 | 1日 | 田中 | 未着手 | Figmaでワイヤーフレーム作成 |
| 1.3 | API設計書作成 | 2024/05/03 | 2024/05/03 | 1日 | 佐藤 | 未着手 | OpenAPI仕様書作成 |
| 1.4 | DB設計書作成 | 2024/05/07 | 2024/05/07 | 0.5日 | 佐藤 | 未着手 | ERD作成 |
| 2 | **環境構築** | 2024/05/08 | 2024/05/09 | 2日 | - | 未着手 | - |
| 2.1 | 開発環境セットアップ | 2024/05/08 | 2024/05/08 | 0.5日 | 全員 | 未着手 | Docker環境構築 |
| 2.2 | データベース構築 | 2024/05/08 | 2024/05/08 | 0.5日 | 佐藤 | 未着手 | MongoDB Atlas設定 |
| 2.3 | CI/CD環境構築 | 2024/05/09 | 2024/05/09 | 1日 | 鈴木 | 未着手 | GitHub Actions設定 |
| 3 | **フロントエンド実装** | 2024/05/10 | 2024/05/16 | 7日 | 田中 | 未着手 | - |
| 3.1 | ベース画面作成 | 2024/05/10 | 2024/05/10 | 1日 | 田中 | 未着手 | ルーティング・レイアウト |
| 3.2 | TODO一覧画面 | 2024/05/13 | 2024/05/13 | 1日 | 田中 | 未着手 | 一覧表示・状態管理 |
| 3.3 | TODO追加機能 | 2024/05/14 | 2024/05/14 | 1日 | 田中 | 未着手 | フォーム作成・バリデーション |
| 3.4 | TODO編集機能 | 2024/05/15 | 2024/05/15 | 1日 | 田中 | 未着手 | インライン編集機能 |
| 3.5 | TODO削除機能 | 2024/05/16 | 2024/05/16 | 0.5日 | 田中 | 未着手 | 削除確認モーダル |
| 3.6 | 検索機能 | 2024/05/16 | 2024/05/16 | 1日 | 田中 | 未着手 | フィルタリング機能 |
| 3.7 | スタイリング調整 | 2024/05/16 | 2024/05/16 | 1日 | 田中 | 未着手 | CSS・レスポンシブ対応 |

合計：約18日

## よくある質問と回答

### Q1: WBSが大きくなりすぎて管理しきれません

**A:** 階層を3〜4レベル程度に抑えましょう。それ以上深くなる場合は、別のWBSとして分離することを検討してください。

### Q2: 見積もりが全然当たりません

**A:** 最初は誰でも当たりません！過去の実績を記録して、徐々に精度を上げていきましょう。「設計：実装：テスト = 2:5:3」のような比率も参考になります。

### Q3: WBSを作るのに時間がかかりすぎます

**A:** 最初は時間をかけても大丈夫です。慣れてくると短時間で作れるようになります。テンプレートを作っておくと効率的です。

## まとめ

**マスタースケジュール**と**WBS**は、プロジェクトを成功に導くための重要なツールです。

**覚えておきたいポイント：**

✅ **マスタースケジュール**：プロジェクト全体の大きな流れ
✅ **WBS**：詳細な作業の分解構造  
✅ **適切な粒度**：1タスク0.5〜2日程度
✅ **完了条件を明確に**：何をもって完了とするか
✅ **ツールを活用**：Trello、Asana、GitHub Projects等
✅ **継続的な改善**：実績を記録して精度向上

新人エンジニアの皆さん、最初は完璧を目指さず、まずは作ってみることから始めましょう。経験を積むことで、より正確で実用的なスケジュールが作れるようになります。

プロジェクトの成功は、良い計画から始まります。マスタースケジュールとWBSをマスターして、信頼されるエンジニアを目指しましょう！
